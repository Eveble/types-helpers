import { EvebleTypes, SerializableMixin, EjsonableMixin } from '@eveble/eveble';
import { ValidableMixin } from './mixins/validable-mixin';
export declare class ValueString extends String implements EvebleTypes.Hookable {
    constructor(value: string);
    protected onValidation(value: string, isStrict?: boolean): boolean;
    equals(other: any): boolean;
    typeName: () => string;
    static typeName: typeof EjsonableMixin.typeName;
    getTypeName: () => string;
    toJSONValue: () => Record<string, any>;
    static getTypeName: typeof SerializableMixin.getTypeName;
    static toString: typeof SerializableMixin.toString;
    anchor(): string;
    big(): string;
    blink(): string;
    bold(): string;
    fixed(): string;
    fontcolor(color: string): string;
    fontsize(size: number | string): string;
    italics(): string;
    link(url: string): string;
    small(): string;
    strike(): string;
    sub(): string;
    sup(): string;
    registerHook: (action: string, id: string, hook: EvebleTypes.AnyFunction, shouldOverride?: boolean | undefined) => void;
    overrideHook: (action: string, id: string, hook: EvebleTypes.AnyFunction) => void;
    getHook: (action: string, id: string) => EvebleTypes.AnyFunction | undefined;
    getHookOrThrow: (action: string, id: string) => EvebleTypes.AnyFunction;
    getHooks: (action: string) => Record<string, EvebleTypes.AnyFunction>;
    getActions: () => Record<string, Record<string, EvebleTypes.AnyFunction>>;
    hasHook: (action: string, id: string) => boolean;
    hasAction: (action: string) => boolean;
    removeHook: (action: string, id: string) => void;
    static setValidator: typeof ValidableMixin.setValidator;
    static getValidator: typeof ValidableMixin.getValidator;
    static removeValidator: typeof ValidableMixin.removeValidator;
    static hasValidator: typeof ValidableMixin.hasValidator;
}
